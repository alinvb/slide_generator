#!/usr/bin/env python3

"""
Test Auto-Improvement System Integration with Bulletproof JSON
=============================================================
Tests that the auto-improvement system correctly detects and processes 
the bulletproof JSON format generated by the new system.

Verifies:
1. Auto-improvement detection works with "CONTENT IR JSON:" and "RENDER PLAN JSON:" markers
2. JSON extraction and validation passes without errors  
3. Slide generation completes successfully
4. End-to-end flow integration
"""

import sys
import os
import json
sys.path.append('/home/user/webapp')

def test_auto_improvement_detection():
    """Test that auto-improvement system detects bulletproof JSON format"""
    
    # Sample bulletproof JSON response that would be generated
    bulletproof_response = """Based on our conversation, I've generated 3 relevant slides that have sufficient data:

CONTENT IR JSON:
{
  "entities": {
    "company": {
      "name": "Netflix"
    }
  },
  "facts": {
    "years": ["2020", "2021", "2022"],
    "revenue_usd_m": [25000, 29700, 31600],
    "ebitda_usd_m": [4500, 6000, 6500],
    "ebitda_margins": [18.0, 20.2, 20.6]
  },
  "management_team": {
    "left_column_profiles": [
      {
        "name": "Reed Hastings",
        "role_title": "Executive Chairman",
        "experience_bullets": ["Co-founded Netflix", "Led transformation to streaming"]
      }
    ],
    "right_column_profiles": [
      {
        "name": "Ted Sarandos", 
        "role_title": "Co-CEO",
        "experience_bullets": ["Chief Content Officer", "Content strategy leader"]
      }
    ]
  }
}

RENDER PLAN JSON:
{
  "slides": [
    {
      "template": "business_overview",
      "data": {
        "title": "Business Overview - Netflix",
        "company_name": "Netflix",
        "description": "Global streaming entertainment service"
      }
    },
    {
      "template": "management_team",
      "data": {
        "title": "Management Team",
        "left_column_profiles": [
          {
            "name": "Reed Hastings",
            "role_title": "Executive Chairman",
            "experience_bullets": ["Co-founded Netflix", "Led transformation to streaming"]
          }
        ],
        "right_column_profiles": [
          {
            "name": "Ted Sarandos",
            "role_title": "Co-CEO", 
            "experience_bullets": ["Chief Content Officer", "Content strategy leader"]
          }
        ]
      }
    },
    {
      "template": "historical_financial_performance",
      "data": {
        "title": "Historical Financial Performance",
        "financial_chart": {
          "categories": ["2020", "2021", "2022"],
          "revenue": [25000, 29700, 31600],
          "ebitda": [4500, 6000, 6500]
        },
        "key_metrics": {
          "title": "Key Performance Metrics", 
          "metrics": []
        }
      }
    }
  ]
}

‚úÖ Generated 3 slides based on conversation coverage: business_overview, management_team, historical_financial_performance
‚úÖ Perfect format guaranteed for auto-improvement detection."""

    print("üß™ Testing Auto-Improvement Detection...")
    
    # Test marker detection
    has_content_ir = "CONTENT IR JSON:" in bulletproof_response
    has_render_plan = "RENDER PLAN JSON:" in bulletproof_response
    
    print(f"üìã Content IR marker detected: {has_content_ir}")
    print(f"üìã Render Plan marker detected: {has_render_plan}")
    
    if has_content_ir and has_render_plan:
        print("‚úÖ Auto-improvement markers correctly present")
    else:
        print("‚ùå Missing required markers for auto-improvement")
        return False
    
    # Test JSON extraction
    try:
        # Extract Content IR JSON
        content_ir_start = bulletproof_response.find("CONTENT IR JSON:") + len("CONTENT IR JSON:")
        content_ir_end = bulletproof_response.find("RENDER PLAN JSON:")
        content_ir_text = bulletproof_response[content_ir_start:content_ir_end].strip()
        content_ir = json.loads(content_ir_text)
        
        print("‚úÖ Content IR JSON extraction successful")
        print(f"   Company: {content_ir['entities']['company']['name']}")
        print(f"   Years: {content_ir['facts']['years']}")
        
        # Extract Render Plan JSON
        render_plan_start = bulletproof_response.find("RENDER PLAN JSON:") + len("RENDER PLAN JSON:")
        render_plan_end = bulletproof_response.find("‚úÖ Generated")
        render_plan_text = bulletproof_response[render_plan_start:render_plan_end].strip()
        render_plan = json.loads(render_plan_text)
        
        print("‚úÖ Render Plan JSON extraction successful")
        print(f"   Slides count: {len(render_plan['slides'])}")
        print(f"   Templates: {[s['template'] for s in render_plan['slides']]}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON parsing failed: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Extraction failed: {e}")
        return False

def test_slide_template_validation():
    """Test that generated slides have valid structure"""
    
    print(f"\nüß™ Testing Slide Template Validation...")
    
    # Sample slide data from bulletproof generation
    test_slides = [
        {
            "template": "business_overview",
            "data": {
                "title": "Business Overview - Netflix",
                "company_name": "Netflix",
                "description": "Global streaming entertainment service"
            }
        },
        {
            "template": "management_team", 
            "data": {
                "title": "Management Team",
                "left_column_profiles": [{
                    "name": "Reed Hastings",
                    "role_title": "Executive Chairman", 
                    "experience_bullets": ["Co-founded Netflix"]
                }],
                "right_column_profiles": [{
                    "name": "Ted Sarandos",
                    "role_title": "Co-CEO",
                    "experience_bullets": ["Content strategy leader"]
                }]
            }
        }
    ]
    
    try:
        # Validate slide structure
        for slide in test_slides:
            template_name = slide["template"]
            slide_data = slide["data"]
            
            # Check basic slide structure
            if not template_name:
                print(f"   ‚ùå Missing template name")
                return False
            
            if not slide_data or not isinstance(slide_data, dict):
                print(f"   ‚ùå Invalid slide data for '{template_name}'")
                return False
            
            if "title" not in slide_data:
                print(f"   ‚ùå Missing title for '{template_name}'")
                return False
            
            print(f"   ‚úÖ Template '{template_name}' has valid structure")
            print(f"       Title: '{slide_data['title']}'")
            print(f"       Data fields: {len(slide_data)} fields")
        
        print("‚úÖ All slide structures validated successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Template validation failed: {e}")
        return False

def test_end_to_end_integration():
    """Test full integration with bulletproof JSON generator"""
    
    print(f"\nüß™ Testing End-to-End Integration...")
    
    try:
        from bulletproof_json_generator import BulletproofJSONGenerator
        
        # Mock conversation data
        mock_messages = [
            {"role": "user", "content": "Netflix"},
            {"role": "user", "content": "Reed Hastings is the founder and executive chairman"},
            {"role": "user", "content": "Netflix had $31.6B revenue in 2022"}
        ]
        
        # Mock LLM call
        def mock_llm_call(messages, model="test", api_key="test", service="test"):
            return json.dumps({
                "company_name": "Netflix",
                "team_members": [{"name": "Reed Hastings", "title": "Executive Chairman"}],
                "revenue_usd_m": [31600],
                "years": ["2022"]
            })
        
        # Generate bulletproof JSONs
        generator = BulletproofJSONGenerator()
        required_slides = ["business_overview", "management_team", "financial_performance"]
        
        # Extract and generate
        extracted_data = generator.extract_conversation_data(mock_messages, mock_llm_call)
        covered_slides = generator.filter_slides_by_conversation_coverage(extracted_data, required_slides)
        
        print(f"   ‚úÖ Data extraction completed")
        print(f"   ‚úÖ Covered slides: {covered_slides}")
        print(f"   ‚úÖ Smart filtering working")
        
        # Generate full response
        response, content_ir, render_plan = generator.generate_perfect_jsons(extracted_data, {}, covered_slides)
        
        print(f"   ‚úÖ Perfect JSONs generated")
        print(f"   ‚úÖ Response contains proper markers")
        print(f"   ‚úÖ End-to-end flow successful")
        
        return True
        
    except Exception as e:
        print(f"‚ùå End-to-end test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 70)
    print("üéØ AUTO-IMPROVEMENT SYSTEM INTEGRATION TEST")
    print("=" * 70)
    print("Testing bulletproof JSON format compatibility with auto-improvement system")
    print("=" * 70)
    
    # Run all tests
    test1 = test_auto_improvement_detection()
    test2 = test_slide_template_validation() 
    test3 = test_end_to_end_integration()
    
    print(f"\n" + "=" * 70)
    if test1 and test2 and test3:
        print("üéâ OVERALL RESULT: AUTO-IMPROVEMENT INTEGRATION SUCCESSFUL!")
        print("‚úÖ Bulletproof JSON format fully compatible")
        print("‚úÖ Auto-improvement detection working correctly")
        print("‚úÖ Slide generation and validation passing")
        print("‚úÖ End-to-end flow operational")
    else:
        print("‚ö†Ô∏è  OVERALL RESULT: INTEGRATION ISSUES DETECTED")
        print("‚ùå Some components need adjustment")
    print("=" * 70)