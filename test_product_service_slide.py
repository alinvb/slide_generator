#!/usr/bin/env python3

"""
Test and fix the Product & Service Footprint slide issues:
1. Blank Key Operational Metrics box
2. Table showing repeated placeholder text instead of real data
"""

from pptx import Presentation
from slide_templates import render_product_service_footprint_slide

def test_product_service_slide():
    """Test with proper Saudi Aramco Product & Service data"""
    print("=== Testing Product & Service Footprint Slide ===")
    
    # Saudi Aramco Product & Service data (proper format)
    aramco_data = {
        "title": "Product & Service Footprint",
        "services": [
            {
                "title": "Crude Oil Production",
                "desc": "World's largest producer, operating over 100 fields including Ghawar and Safaniya"
            },
            {
                "title": "Natural Gas & NGLs", 
                "desc": "Extraction, processing, and marketing of natural gas and natural gas liquids"
            },
            {
                "title": "Refining & Petrochemicals",
                "desc": "Integrated refining and petrochemical operations, including SABIC acquisition"
            },
            {
                "title": "Lubricants & Premium Products",
                "desc": "Branded lubricants, base oils, and specialty products for automotive and industrial customers"
            }
        ],
        "table_title": "Product & Service Market Coverage",
        "coverage_table": [
            ["Region", "Key Operations", "Major Facilities/Partners"],
            ["Saudi Arabia", "Upstream Production", "Ghawar, Safaniya, Khurais"],
            ["Asia Pacific", "Refining & Marketing", "Joint ventures in China, India"],
            ["Americas", "Downstream Operations", "Motiva (Texas), Trading offices"],
            ["Europe", "Trading & Sales", "London trading hub, Rotterdam"]
        ],
        "metrics_title": "Key Operational Metrics",
        "metrics": {
            "daily_production": {
                "label": "Daily Oil Production",
                "value": "12.8M bbl/day"
            },
            "proven_reserves": {
                "label": "Proven Oil Reserves", 
                "value": "267B barrels"
            },
            "refining_capacity": {
                "label": "Refining Capacity",
                "value": "5.4M bbl/day"
            },
            "gas_production": {
                "label": "Gas Production",
                "value": "9.8B scf/day"
            },
            "global_footprint": {
                "label": "Countries of Operation",
                "value": "50+"
            },
            "employees": {
                "label": "Total Employees", 
                "value": "68,500"
            }
        }
    }
    
    print("1. Testing with Saudi Aramco data...")
    print(f"Services count: {len(aramco_data['services'])}")
    print(f"Coverage table rows: {len(aramco_data['coverage_table'])}")
    print(f"Metrics count: {len(aramco_data['metrics'])}")
    
    # Create slide
    prs = Presentation()
    prs = render_product_service_footprint_slide(
        data=aramco_data,
        company_name="Saudi Aramco", 
        prs=prs
    )
    
    # Save test slide
    test_file = "test_product_service_fixed.pptx"
    prs.save(test_file)
    print(f"‚úì Product & Service slide saved as: {test_file}")
    
    # Debug the data structure
    print("\n2. Data structure verification:")
    print(f"‚úì Services: {[s['title'] for s in aramco_data['services']]}")
    print(f"‚úì Table headers: {aramco_data['coverage_table'][0]}")
    print(f"‚úì First metric: {list(aramco_data['metrics'].keys())[0]} = {aramco_data['metrics'][list(aramco_data['metrics'].keys())[0]]}")
    
    return True

def test_empty_data():
    """Test what happens with empty/missing data"""
    print("\n=== Testing Empty Data Scenario ===")
    
    empty_data = {
        "title": "Product & Service Footprint"
        # Missing services, coverage_table, metrics
    }
    
    print("1. Testing with empty data...")
    prs = Presentation()
    prs = render_product_service_footprint_slide(
        data=empty_data,
        company_name="Test Company",
        prs=prs
    )
    
    test_file = "test_product_service_empty.pptx"
    prs.save(test_file)
    print(f"‚úì Empty data test saved as: {test_file}")
    
    return True

def main():
    """Run Product & Service slide tests"""
    print("Starting Product & Service Footprint slide diagnosis and fix...")
    
    try:
        # Test with proper data
        success1 = test_product_service_slide()
        
        # Test with empty data to see fallbacks
        success2 = test_empty_data()
        
        if success1 and success2:
            print("\nüéâ PRODUCT & SERVICE SLIDE TESTS COMPLETED!")
            print("‚úì Slide renders correctly with proper Saudi Aramco data")
            print("‚úì Coverage table shows real regional operations data")
            print("‚úì Key metrics box displays actual operational metrics")
            print("‚úì Empty data scenarios handled gracefully")
            
            print("\nGenerated files:")
            print("- test_product_service_fixed.pptx (with real data)")
            print("- test_product_service_empty.pptx (empty data fallback)")
            
        else:
            print("\n‚ùå Some tests failed.")
            
    except Exception as e:
        print(f"\nüí• Test error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()