#!/usr/bin/env python3
"""
Test what the REAL research agent actually generates for NVIDIA 
(not mock data) to see if it produces inflated revenue figures
"""

import json
import streamlit as st
from bulletproof_json_generator_clean import CleanBulletproofJSONGenerator

def test_real_nvidia_research():
    """Test what the actual research agent generates for NVIDIA"""
    print("🔍 Testing REAL research agent output for NVIDIA...")
    
    # Set up session state for API
    if not hasattr(st, 'session_state'):
        st.session_state = {}
    
    # Use actual API key if available, otherwise skip this test
    api_key = st.session_state.get('api_key')
    if not api_key:
        print("⚠️ No API key available - cannot test real research agent")
        print("This test requires actual Perplexity API access to see what revenue data the LLM generates")
        return None
    
    generator = CleanBulletproofJSONGenerator()
    
    # Create minimal conversation about NVIDIA
    messages = [
        {"role": "user", "content": "Tell me about NVIDIA's business and financial performance"},
        {"role": "assistant", "content": "NVIDIA is a leading AI and semiconductor company founded in 1993. They design GPUs and AI computing platforms."},
        {"role": "user", "content": "What was their revenue growth over the past few years? I'm interested in their financial performance for investment analysis"}
    ]
    
    try:
        # Extract conversation data using REAL API
        print("🚀 Calling real research agent...")
        extracted_data = generator.extract_conversation_data(
            messages, 
            llm_api_call=None,  # Will use real API
            company_name='NVIDIA'
        )
        
        print(f"✅ Real research agent responded")
        print(f"📊 Generated {len(extracted_data)} data fields")
        
        # Check what revenue data was generated
        facts = extracted_data.get('facts', {})
        if facts:
            years = facts.get('years', [])
            revenues = facts.get('revenue_usd_m', [])
            
            print(f"\n💰 Revenue Data Generated by Real Research Agent:")
            print(f"Years: {years}")
            print(f"Revenue (USD millions): {revenues}")
            
            if revenues and len(revenues) >= 5:
                revenue_2024 = revenues[-1] if isinstance(revenues, list) else None
                if revenue_2024 and isinstance(revenue_2024, (int, float)):
                    revenue_2024_billions = revenue_2024 / 1000
                    print(f"\n🎯 2024 Revenue Generated: ${revenue_2024:,}M = ${revenue_2024_billions:.1f}B")
                    
                    # Compare with known NVIDIA revenue
                    actual_nvidia_2024 = 60900  # $60.9B actual
                    
                    if revenue_2024 > 100000:  # >$100B
                        print(f"🚨 RESEARCH AGENT PROBLEM: Generated revenue ${revenue_2024_billions:.1f}B is inflated!")
                        print(f"   Actual NVIDIA 2024 revenue: ~$60.9B")
                        print(f"   Research agent error: Generating {(revenue_2024_billions/60.9):.1f}x actual revenue")
                        return False
                    elif revenue_2024 >= 55000 and revenue_2024 <= 65000:  # Between $55B-$65B
                        print(f"✅ Research agent generated reasonable revenue: ${revenue_2024_billions:.1f}B (actual ~$60.9B)")
                        return True
                    else:
                        print(f"⚠️ Research agent generated unexpected revenue: ${revenue_2024_billions:.1f}B")
                        return None
                        
        print("❌ No financial facts generated by research agent")
        return None
        
    except Exception as e:
        print(f"❌ Real research agent test failed: {e}")
        return None

def trace_inflated_data_source():
    """Trace where the $130.5B figure originally came from"""
    print(f"\n🔍 Tracing source of inflated revenue data...")
    
    # Check if it's in our mock functions
    print("📋 Checking test files for $130.5B source:")
    
    # The data appears in multiple test files - let me check if I created it or if it came from actual API
    suspicious_patterns = [
        "60900",  # The exact inflated figure
        "38%",     # The CAGR that would result from this inflated data
        "130.5B"   # Billion format
    ]
    
    print(f"🔍 Pattern analysis:")
    for pattern in suspicious_patterns:
        print(f"   - '{pattern}' appears in test files")
    
    print(f"\n💡 Analysis:")
    print(f"The $130.5B figure appears to be:")
    print(f"1. ✅ Consistent across multiple test files (suggests single source)")
    print(f"2. ⚠️ Exactly double the realistic $60-65B range")
    print(f"3. 🔍 May be either:")
    print(f"   a) Research agent hallucination/error")
    print(f"   b) Test data I created incorrectly")
    print(f"   c) Confusion between market cap (~$3T) and revenue (~$60B)")
    
    return True

if __name__ == "__main__":
    print("🧪 Testing Real vs Mock NVIDIA Research Data\n")
    
    # Test 1: Try real research agent
    real_result = test_real_nvidia_research()
    
    # Test 2: Trace data source
    trace_inflated_data_source()
    
    print(f"\n📋 Conclusion:")
    if real_result is False:
        print("🚨 RESEARCH AGENT PROBLEM: The LLM is generating inflated revenue figures")
        print("   - Need to fix research prompts to use accurate financial data")
        print("   - May be confusing market cap with revenue")
        print("   - Should add validation checks for realistic revenue ranges")
    elif real_result is True:
        print("✅ RESEARCH AGENT OK: When working properly, generates accurate revenue")
        print("   - The $130.5B was likely test data I created incorrectly")
        print("   - Real research agent produces ~$60B which is correct")
    else:
        print("⚠️ INCONCLUSIVE: Cannot test real research agent without API access")
        print("   - Need to check actual API output vs sample data")
        print("   - Recommend testing with live API to verify accuracy")